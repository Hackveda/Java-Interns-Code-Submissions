// helloworld sample

package com.ayush;

public class HelloWorld {

	public static void main(String[] args) {
		System.out.println("Hello World");

	}

}

// Reverse given number

package com.ayush;

public class HelloWorld {

	public static void main(String[] args) {
		int number =9876532, reverse =0 ;
		while( number != 0)

		{
			int remainder = number % 10;
			reverse = reverse * 10 + remainder;
			number = number/10;
			
		}
		System.out.println("The reverse of the given number is : " + reverse);
	}

}

// variables
/* 
int , 
float= 23.244 ( decimal number)
double = 24.2329910 ( decimal number with more typable numbers after decimal)
boolean = True or False 
char ( character)
String = group of characters ( ex. name assigned )

*/

//nestedwhile

package com.ayush;


public class Practice {

	public static void main(String[] args) 
	{
		// demo nested while 
		int i=1, j=1;
		while (i<= 10)
		{
			while (j<= 5)
			{
				System.out.print("*");
				j++;
			}
			i++;
			System.out.println("");
			j=1;
		}
		
	}

}
             
// string variable sample code
package com.ayush;


public class Practice {

	public static void main(String[] args) 
	{
     // variables 
	  String name = " Ayush";
	  String neighbour = "Aniket";
	  String friend = neighbour;
	  
	  System.out.println(friend);
	  System.out.println(name);
	}

}

// data types 

package com.ayush;


public class Practice {

	public static void main(String[] args) 
	{
	//primitive data types
	
	byte age = 19;
	int phone = 9823788888;
	long no2 = 1234888888888800009L
	float = 3.14F
	char letter = '@';
	boolean isAdult = false;
	
	//non-primitive data type
	
	String name = "Ayush";
	System.out.println(name.length());
	
	}

}

package com.ayush;

public class Practice {

	public static void main(String[] args) 
	{
	//non-primitive data type
	
	String name = "Ayush";
	System.out.println(name.length());
	
	}

}

package com.ayush;

public class Practice {

	public static void main(String[] args) 
	{
	//Strings
	
	String name1 = "Ayush";
	String name2 = "Arpit";
	String brothers = name1 + " and "  + name2;
	System.out.println(brothers);
	
	
	String name = "Ayush";
	System.out.println(name.charAt(2));
	}

}

//Arrays

package com.ayush;

public class Practice {

	public static void main(String[] args) 
	{
	//Arrays
	
	int age = 30;
	int physics = 99;
	int chem = 95;
	int eng = 90;
	
	int[] marks = new int [3];
	marks[0] = 99;
	marks[1] = 95;
	marks[2] = 90;
	
	System.out.println(marks[2]);
	
	}

}

// use of java.util.Arrays;

package com.ayush;
import java.util.Arrays;

public class Practice {

	public static void main(String[] args) 
	{
	//Arrays
	
	int age = 30;
	int physics = 99;
	int chem = 95;
	int eng = 90;
	
	int[] marks = new int [3];
	marks[0] = 99;
	marks[1] = 95;
	marks[2] = 90;
	
	System.out.println(marks[0]);
	
	Arrays.sort(marks);
	
	System.out.println(marks[0]);
	
	}

}

//Arithmetic operators

package com.ayush;
import java.util.Arrays;

public class Practice {

	public static void main(String[] args) 
	{
	// Arithematic operators
		
		int a = 4;
		int b = 2;
		int sum =a + b;
		int diff =a - b;
		int mul =a * b;
		int div =a / b;
		int modulo =a % b;
		
		System.out.println(sum);
		System.out.println(diff);
		System.out.println(mul);
		System.out.println(div);
		System.out.println(modulo);
		
	}

}

//nested loop basics 

Ex. 1 : 

package com.ayush;
import java.util.Arrays;

public class Practice {

	public static void main(String[] args) 
	{
	// nested loops
		
	for (int i = 0; i < 3; i++)
	{
	for (int j = 0; j < 2; j++)	
	
		System.out.println(i + " " + j );
	
	System.out.println();
	}

}
	
}

O/P 

0 0
0 1

1 0
1 1

2 0
2 1

ex. 2: Print star incrementing

package com.ayush;
import java.util.Arrays;

public class Practice {

	public static void main(String[] args) 
	{
	// nested loops
		
	for (int i = 1; i <=5; i++)
	{
	for (int j = 1; j <=i; j++)	
	
		System.out.print("*");

	
	System.out.println();
	}

}
	
}
 
O/P

*
**
***
****
*****

Ex. 3 Print multiplication table 1 to 10

package com.ayush;
import java.util.Arrays;

public class Practice {

	public static void main(String[] args) 
	{
	// nested loops
		
	for (int i = 1; i <=10; i++)
	{
	for (int j = 1; j <=10; j++)	
	
		System.out.print((i * j) + " ");


	
	System.out.println();
	}

}
	
}

O/P

1 2 3 4 5 6 7 8 9 10 
2 4 6 8 10 12 14 16 18 20 
3 6 9 12 15 18 21 24 27 30 
4 8 12 16 20 24 28 32 36 40 
5 10 15 20 25 30 35 40 45 50 
6 12 18 24 30 36 42 48 54 60 
7 14 21 28 35 42 49 56 63 70 
8 16 24 32 40 48 56 64 72 80 
9 18 27 36 45 54 63 72 81 90 
10 20 30 40 50 60 70 80 90 100 


/twoD Array

package com.ayush;
import java.util.Scanner;

public class Practice {

	public static void main(String[] args) 
	{
	 System.out.print("Enter 2D array size : ");
	 Scanner sc=new Scanner(System..in);
	 int rows=sc.nextInt();
	 int coloumns=sc.nextInt();
	 
	 System.out.println("Enter array elements : ");
	 
	 int twoD[][]=new int{rows][coloumns];
	 
	  for(int i=0; i<rows;i++)
	    {
	      for(int j=0; j<rows;j++)
	      {
	          twoD[i][j]=sc.nextInt[];
	      }
	    }
	    System.out.print("\nData you entered : \n");
	    
	    for(int []x:twoD)
	    { 
	         for(int y:x)
		 {
		 System.out.print(y+"          ");
		 }
		 System.out.println();
	    }
	  }
	}
	

// nested while java

package com.ayush;
import java.util.Scanner;

public class Practice {

	public static void main(String[] args) 
	{
	
		int i=1,j=1;
			while (i<=10)
			{
				while(j<=9)
				{
				System.out.print(j);
					j++;
				}
				i++;
				System.out.println("");
				j=1;
			}
		}
	}

//Do while

package com.ayush;

public class Practice {
	public static void main(String[] args)
	{
	int count = 1;
	do 
	{
		System.out.println("Number_Count is: " + count);
		count++;
	}
	while (count <= 19);
	}
}




//new

package com.ayush;

public class Q1
{ 
     private int a = 15;
     public int b = 85;
     protected int c = 75;
     int d = 19;

}


package com.ayush;

public class Q2 extends Q1
{
     public static void main(String[] args)
     {
      Q2 q= new Q2();
      //System.out.println(q.a); // showimg error because of private specifier
      System.out.println(q.b);
      System.out.println(q.c);
      System.out.println(q.d);
      }
}



// Testemployee


package com.ayush;

public class Practice {

public static void main(String[] args)
	{
		Employee e=new Employee();
		Example1 e1=new Example1();
		Example2 e2=new Example2();
		e.name="Ayush";
		e.age=19;
		e.salary=25000;
		
		e1.name="Aniket";
		e1.age=18;
		e1.salary=15000;
		e1.language="Marathi";
		
		e2.name="Arpit";
		e2.age=20;
		e2.salary=29500;
		e2.language="hindi";
		e2.dataBaseTool="MySql";
		
		e.printData();
		e1.printData();
		e2.printData();
	}
}

//encapsulation

package com.ayush;

private int ayush = 20;

public Class A
{
  private int ayush=20;
  int nikhil = 100;
}

Class B extends A
{
    public static void main(Strings[] args)
    {
      B b = new B();
      System.out.println(b.amit);
      System.out.println(b.vivek);
    }
}

//27

package com.ayush;

public class Practice1
 {  
    //private data members  
     private long acc_no;  
     private String name,email;  
     private float amount;  
     //public getter and setter methods  
    public long getAcc_no()
    {  
       return acc_no;  
     }  
    public void setAcc_no(long acc_no)
    {  
      this.acc_no = acc_no;  
    }  
    public String getName() 
    {  
      return name;  
    }  
    public void setName(String name) 
    {  
    this.name = name;  
    }  
    public String getEmail() 
    {  
    return email;  
    }  
    public void setEmail(String email)
    {  
    this.email = email;  
    }  
    public float getAmount()
    {  
    return amount;  
    }  
    public void setAmount(float amount)
    {  
    this.amount = amount;  
    }  
  
}

//exceptionh28

package com.ayush;

import java.io.PrintStream;
import java.util.*;


public class ExceptionHandlingClass {

	public static void main(String[] args) {

		  {
			    Scanner sc = new Scanner(System.in);
			    System.out.println("Enter first number");
			    int x = sc.nextInt();
			    System.out.println("Enter second number");
			    int y = sc.nextInt();
			    int z = add(x, y);
			    System.out.println("Answer is:"+ z);}
			  }
			  
			  private static int add(int a, int b)
			  {
			    int sum = 0;
			    try
			    {
			      sum = a + b;
			    }
			    catch (Exception e)
			    {
			      System.out.println("Only integers allowed");
			    }
			    finally
			    {
			      System.out.println("Executed");
			    }
			    return sum;
			  }

}


//exception test  (try and catch)



import Java.util.InputMismatchException;
import java.util.Scanner;

public class Exceptiontest {

public static void main (String[] args) {

try{
System.out.println( " Welcome to Max Heartrate Calculator" );
Scanner sc= new Scanner (System.in);

System.out.println(" Please enter your age: ");
int age =sc.nextInt();

int maxheartrate =220 - age ;

System.out.println(" Max heart rate is  " + maxheartrate);
} catch (InputMismatchException e) {
System.out.println("Please enter integer only");
}

}
}

//exception test (try and catch) 2

import Java.util.InputMismatchException;
import java.util.Scanner;

public class Exceptiontest {

public static void main (String[] args) {

try{
System.out.println( " Welcome to Max Heartrate Calculator" );
Scanner sc= new Scanner (System.in);

System.out.println(" Please enter your age: ");
int age =sc.nextInt();

int maxheartrate =220 - age ;

System.out.println(" Max heart rate is  " + maxheartrate);
} catch (Exception e) {
System.out.println(e.getMessage());
}

}
}

//ThrowException
public class ThrowExceptionClass
{
    public static void main(final String[] args) {
        final Scanner sc = new Scanner(System.in);
        System.out.println("Enter your age");
        final int age = sc.nextInt();
        if (age <= 0) {
            throw new NumberFormatException();
        }
        if (age >= 120) {
            throw new NumberFormatException();
        }
        System.out.println("max heart rate is " + (220 - age));
    }
}

//Chained exceptions

import java.util.InputMismatchException;
import java.util.Scanner;

public class ChainedExceptions {

public static void main (String[] args) {

try{

Scanner sc= new Scanner (System.in);

/* Standard ideal weight calculation formula 
50 +( 0.91 * (height - 152.4) )
*/

System.out.println(" Please enter your height in cms: ");
float height =sc.nextFloat();

double idealweight = 50 +( 0.91 * (height - 152.4) )  ;

System.out.println(" Your ideal weight is  " + idealweight);
} catch (InputMismatchException e) {
throw new NumberformatException()


}

}
}

//List interface and Arraylist


//Array list

import java.util.ArrayList;

public class Mylists implements List<String>{

public static void main ( String[] args){

ArrayList myArraylist = new ArrayList();

myArrayList.add(1);
myArrayList.add(2);
myArrayList.add(3);
myArrayList.add(4);
myArrayList.add(5);

System.out.println("Print List 1");
System.out.println(myArrayList.get(1));
System.out.println(myArrayList.get(2));
System.out.println(myArrayList.get(4));

myArrayList.add(1, 6);
System.out.println(myArrayList.get(1));

ArrayList list2 = new ArrayList();
list2.addAll(myArrayList);

System.out.println("Print List 2");
System.out.println(list2.get(1));
System.out.println(list2.get(4));
System.out.println(list2.get(0));

list2.clear();
try{
System.out.println("Print List 2");
System.out.println(list2.get(1));
System.out.println(list2.get(4));
System.out.println(list2.get(0));
}catch (IndexOutOfBoundsException e){
System.out.println("List is cleared");
}
ArrayList myArrayListClone = (ArrayList) myArrayList.clone();

System.out.println("clearing my ArrayList after cloning ");
myArrayList.clear();

System.out.println("Printing from MyArrayList Clone");
System.out.println(list2.get(1));
System.out.println(list2.get(4));
System.out.println(list2.get(0));

System.out.println("Check if myArraylistClone contains 6");

Boolean result = myArraylistClone.contains(6);

if(result){
System.out.println("Item Exists");
}
else{
System.out.println("Item Doesn't Exists");
}

}
}


//list interface

import java.util.*;

public class Main implements List<String>{

    public static void main(String[] args) {

    }

    @Override
    public int size() {
        return 0;
    }

    @Override
    public boolean isEmpty() {
        return false;
    }

    @Override
    public boolean contains(Object o) {
        return false;
    }

    @Override
    public Iterator<String> iterator() {
        return null;
    }

    @Override
    public Object[] toArray() {
        return new Object[0];
    }

    @Override
    public <T> T[] toArray(T[] a) {
        return null;
    }

    @Override
    public boolean add(String s) {
        return false;
    }

    @Override
    public boolean remove(Object o) {
        return false;
    }

    @Override
    public boolean containsAll(Collection<?> c) {
        return false;
    }

    @Override
    public boolean addAll(Collection<? extends String> c) {
        return false;
    }

    @Override
    public boolean addAll(int index, Collection<? extends String> c) {
        return false;
    }

    @Override
    public boolean removeAll(Collection<?> c) {
        return false;
    }

    @Override
    public boolean retainAll(Collection<?> c) {
        return false;
    }

    @Override
    public void clear() {

    }

    @Override
    public String get(int index) {
        return null;
    }

    @Override
    public String set(int index, String element) {
        return null;
    }

    @Override
    public void add(int index, String element) {

    }

    @Override
    public String remove(int index) {
        return null;
    }

    @Override
    public int indexOf(Object o) {
        return 0;
    }

    @Override
    public int lastIndexOf(Object o) {
        return 0;
    }

    @Override
    public ListIterator<String> listIterator() {
        return null;
    }

    @Override
    public ListIterator<String> listIterator(int index) {
        return null;
    }

    @Override
    public List<String> subList(int fromIndex, int toIndex) {
        return null;
    }

// Stack queue and deque

//stack

import java.util.Stack;

public class Main {

    public static void main(String[] args) {

        Stack instack = new Stack();
        System.out.println("is stack empty:"+instack.empty());
        instack.push(10);
        instack.push(20);
        System.out.println(instack.peek());
        System.out.println(instack.contains(20));
        System.out.println(instack.search(10));
        System.out.println(instack.pop());
        System.out.println(instack.peek());
    }
}

//Queue

import java.util.LinkedList;
import java.util.Queue;
import javax.print.attribute.PrintRequestAttribute;

public class queue {
    
     public static void main(String args[])
     {

        Queue<Integer>q = new LinkedList<>();
        q.offer(2);
        q.offer(3);
        q.offer(5);
        q.offer(6);
 System.out.println("printing element after removing");        
        System.out.println(q);
        q.poll();
        System.out.println(q);
       System.out.println("front element of it");
        System.out.println(q.peek());
       System.out.println("now lets see how the queue looks like");
       System.out.println(q);  
        
    
     }
    }

//Array deque

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Iterator;

public class Main {

    public static void main(String[] args) {

        ArrayDeque<String> deque = new ArrayDeque<>();
        deque.add("Ayush");
        deque.addFirst("lastname :");
        deque.addLast("Dubey");
        System.out.println(deque.getFirst());
        System.out.println(deque.getLast());
        System.out.println(deque.contains("Dubey"));
        System.out.println(" / ");
        deque.offerFirst("Ankesh");
        deque.offer("Arpit");
        Iterator<String> name =deque.iterator();

        while (name.hasNext()){
            System.out.println(name.next());
        }

    }
}

// Implementation of caesor cipher 

import java.util.Scanner;  

public class CaesarCipher {
    public static void main(String[] args) {
       
        Scanner scanner = new Scanner(System.in);

        // prompt the user to enter the secret key
        System.out.print("Enter secret key: ");

        // read in the secret key entered by the user
        int key = scanner.nextInt();

        // consume the remaining newline character in the input buffer
        scanner.nextLine();

        // prompt the user to enter the plain text message
        System.out.print("Enter plain text message: ");

        // read in the plain text message entered by the user
        String plainText = scanner.nextLine();

        // create a string to store the cipher text
        String cipherText = "";

        // iterate over each character in the plain text message
        for (int i = 0; i < plainText.length(); i++) {
            // get the i-th character from the plain text message
            char c = plainText.charAt(i);

            // check if the character is a letter
            if (Character.isLetter(c)) {
                // calculate the shifted character using the secret key
                char shifted = (char) (c + key);

                // wrap around to the beginning of the alphabet if necessary
                if (Character.isLowerCase(c) && shifted > 'z') {
                    shifted -= 26;
                } else if (Character.isUpperCase(c) && shifted > 'Z') {
                    shifted -= 26;
                }

                // add the shifted character to the cipher text
                cipherText += shifted;
            } else {
                // add non-letter characters as is to the cipher text
                cipherText += c;
            }
        }

        // print the cipher text to the console
        System.out.println("Cipher text: " + cipherText);

        // create a string to store the decrypted text
        String decryptedText = "";

        // iterate over each character in the cipher text
        for (int i = 0; i < cipherText.length(); i++) {
            // get the i-th character from the cipher text
            char c = cipherText.charAt(i);

            // check if the character is a letter
            if (Character.isLetter(c)) {
                // calculate the shifted character using the secret key
                char shifted = (char) (c - key);

                // wrap around to the end of the alphabet if necessary
                if (Character.isLowerCase(c) && shifted < 'a') {
                    shifted += 26;
                } else if (Character.isUpperCase(c) && shifted < 'A') {
                    shifted += 26;
                }

                // add the shifted character to the decrypted text
                decryptedText += shifted;
            } else {
                // add non-letter characters as is to the decrypted text
                decryptedText += c;
            }
        }

        System.out.println("Decrypted text: " + decryptedText);
	
        scanner.close();
    }
}
